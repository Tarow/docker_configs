
services:
  db:
    image: postgres:14.5-alpine
    container_name: nextcloud-db
    restart: unless-stopped
    volumes:
      - ./nextcloud-db:/var/lib/postgresql/data
    env_file:
      - db.env
    # Variables defined in db.env:
    # POSTGRES_PASSWORD=
    # POSTGRES_DB=
    # POSTGRES_USER=

  redis:
    image: redis:alpine
    container_name: nextcloud-redis-cache
    restart: unless-stopped

  app:
    image: nextcloud:fpm-alpine
    container_name: nextcloud-app
    restart: unless-stopped
    volumes:
      - /mnt/hdd1/docker/nextcloud_new:/var/www/html
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
    env_file:
      - db.env
    # Variables defined in db.env:
    # POSTGRES_PASSWORD=
    # POSTGRES_DB=
    # POSTGRES_USER=
    depends_on:
      - db
      - redis

  web:
    image: nginx:alpine
    container_name: nextcloud-web
    restart: unless-stopped
    volumes:
      - /mnt/hdd1/docker/nextcloud_new:/var/www/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`next.ntasler.de`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.middlewares=private-chain@file"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
    networks:
      - traefik-proxy
      - default

  cron:
    image: nextcloud:fpm-alpine
    container_name: nextcloud-cron
    restart: unless-stopped
    volumes:
      - /mnt/hdd1/docker/nextcloud_new:/var/www/html
    entrypoint: /cron.sh
    depends_on:
      - db
      - redis

networks:
  traefik-proxy:
    external: true
